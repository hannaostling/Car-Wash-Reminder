//
//  HomeViewController.swift
//  Car Wash Reminder
//
//  Created by Hanna √ñstling on 2018-10-11.
//  Copyright ¬© 2018 Hanna √ñstling. All rights reserved.
//

import UIKit
import UserNotifications
import CoreLocation
import Alamofire
import SwiftyJSON

class HomeViewController: UIViewController, CLLocationManagerDelegate, UISearchBarDelegate, LogicDelegate {
    
    let locationManager = CLLocationManager()
    let weatherData = WeatherData()
    var latitude = ""
    var longitude = ""
    var retrievedData: Bool = true
    var fetchedDataTime = Date()
    var positionOrSearch = PositionOrSearch.position
    let logic = StartViewController.logic
    
    @IBOutlet weak var positionButton: UIBarButtonItem!
    @IBOutlet weak var forecastButton: UIBarButtonItem!
    @IBOutlet weak var temperatureLabel: UILabel!
    @IBOutlet weak var weatherIcon: UIImageView!
    @IBOutlet weak var weatherDataView: UIImageView!
    @IBOutlet weak var washedCarButton: UIButton!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        logic.logicDelegate = self
        logic.askForNotificationPermission()
        logic.checkIfUserShouldWashCar()
        updatePosition()
        if weatherData.city == "" {
            retrievedData = false
        }
    }
    
    // N√§r man klickar p√• s√∂k-knappen visas en s√∂k-ruta.
    @IBAction func searchButtonPressed(_ sender: Any) {
        let searchController = UISearchController(searchResultsController: nil)
        searchController.searchBar.delegate = self
        searchController.searchBar.placeholder = "Visa v√§der f√∂r en annan stad"
        searchController.searchBar.autocapitalizationType = .words
        present(searchController, animated: true, completion: nil)
    }
    
    // N√§r man klickar p√• position-knappen uppdateras v√§dret med nuvarande position.
    @IBAction func positionButtonPressed(_ sender: Any) {
        updatePosition()
    }
    
    // N√§r man klickar p√• "Nu √§r bilen tv√§ttad" s√• markeras bilen som tv√§ttad nyligen och appen tar en paus fr√•n att leta efter en bra dag att tv√§tta bilen med tidsintervallet som anv√§ndaren har valt.
    @IBAction func washedCarButtonPressed(_ sender: Any) {
        var title = "√Ñr du s√§ker?"
        var message = "Appen kommer att sluta leta efter en bra dag att tv√§tta bilen p√• \(logic.user.timeIntervalInWeeks) veckor om du trycker p√• \"Ja\"."
        let alert = UIAlertController(title: title, message: message, preferredStyle: UIAlertController.Style.alert)
        alert.addAction(UIAlertAction(title: "Nej", style: UIAlertAction.Style.cancel, handler: nil))
        alert.addAction(UIAlertAction(title: "Ja", style: UIAlertAction.Style.default, handler: { action in
            self.logic.searchForGoodDayToWashCar = false
            self.logic.user.car.longTimeSinceUserWashedCar = false
            self.logic.user.startSearchingAgainAfter(timeInterval: self.logic.user.timeIntervalInWeeks)
            //self.updatUI()
            title = "Kanon"
            message = "Jag b√∂rjar leta efter en ny bra dag att tv√§tta bilen om \(self.logic.user.timeIntervalInWeeks) veckor igen!"
            let alert = UIAlertController(title: title, message: message, preferredStyle: UIAlertController.Style.alert)
            alert.addAction(UIAlertAction(title: "üëåüèΩ", style: UIAlertAction.Style.default, handler: nil))
            self.present(alert, animated: true, completion: nil)
            self.logic.defaults.set(self.logic.user.car.longTimeSinceUserWashedCar, forKey:self.logic.defaultsUserCarIsWashedRecently)
            self.logic.defaults.set(self.logic.searchForGoodDayToWashCar, forKey:self.logic.defaultsSearchForGoodDayBool)
            self.logic.defaults.set(self.logic.user.startSearchingDate, forKey:self.logic.defaultsSearchForGoodDayDate)
        }))
        self.present(alert, animated: true, completion: nil)
        setButtonsEnabledOrNotEnabled()
        //updateIWithWeatherData()
    }
    
    // Ge anv√§ndaren en prognos, varf√∂r √§r det bra/inte bra att tv√§tta bilen idag?
    @IBAction func forecastButtonPressed(_ sender: Any) {
        giveForecastAlert()
    }
        
    // Ge ja/nej meddelande fr√•n bool.
    func boolMessageEmoji(bool: Bool) -> String {
        if bool == true {
            return "‚úÖ"
        } else {
            return "‚ùå"
        }
    }
    
    // Hitta en bra dag att tv√§tta bilen.
    func checkRain() {
        var countBadWeather = 0
        for weather in weatherData.weatherForTodayAndTomorrow {
            if weather == "Rain" || weather == "Thunderstorm" || weather == "Snow" {
                countBadWeather += 1
                print("‚òîÔ∏è \(weather)")
            } else {
                print("üåû \(weather)")
            }
        }
        if countBadWeather <= 0 {
            logic.noRainTodayAndTomorrow = true
        } else {
            logic.noRainTodayAndTomorrow = false
        }
    }
        
    // N√§r man klickat p√• s√∂k, h√§mta data fr√•n den inskrivna staden!
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        let cityName = searchBar.text!
        logic.user.cityParams = ["q": cityName, "appid": logic.APP_ID]
        logic.defaults.set(logic.user.cityParams, forKey: logic.defaultsCityParams)
        //logic4.user.lastSearchedCity = cityName
        //logic.defaults.set(logi3c.user.lastSearchedCity, forKey: logic.defaultsUserLastSearchedCity)
        positionOrSearch = .search
        getWeather(positionOrSearch: .search)
    }
    
    // H√§mtar data med hj√§lp av CocoaPod 'Alamofire'.
    func getWeatherData(url: String, parameters: [String: String]) {
        Alamofire.request(url, method: .get, parameters: parameters).responseJSON {
            response in
            if response.result.isSuccess {
                let forecastWeatherJSON: JSON = JSON(response.result.value!)
                self.updateForecastWeatherData(json: forecastWeatherJSON)
                self.retrievedData = true
                self.fetchedDataTime = Date()
                //print(forecastWeatherJSON)
            } else {
                print("Error \(response.result.error!))")
                self.title = "Connection Issues"
                self.retrievedData = false
            }
        }
    }
    
    // H√§mtar data antingen fr√•n anv√§ndarens stad, eller med geografiska positionen.
    func getWeather(positionOrSearch: PositionOrSearch) {
        logic.readUserDefaults()
        if positionOrSearch == .position {
            print("Get weather with position params")
            getWeatherData(url: logic.FORECAST_URL, parameters: logic.user.positionParams)
        } else {
            print("Get weather with city params")
            getWeatherData(url: logic.FORECAST_URL, parameters: logic.user.cityParams)
        }
    }
    
    // Uppdaterar forecast-v√§der-data med v√§derinformationen fr√•n JSON. Uppdaterar med tumme upp om det √§r en bra dag att tv√§tta sin bil.
    func updateForecastWeatherData(json: JSON) {
        if let tempResult = json["list"][0]["main"]["temp"].double {
            self.retrievedData = true
            weatherData.temperature = Int(tempResult - 272.15)
            weatherData.city = json["city"]["name"].stringValue
            weatherData.condition = json["list"][0]["weather"][0]["id"].intValue
            weatherData.weatherIconName = weatherData.updateWeatherIcon(condition: weatherData.condition)
            weatherData.weatherForTodayAndTomorrow.removeAll()
            for i in 0...15 {
                weatherData.weatherForTodayAndTomorrow.append(json["list"][i]["weather"][0]["main"].stringValue)
            }
            print(weatherData.city)
            DispatchQueue.main.async {
                self.checkRain()
                self.title = self.weatherData.city
                self.temperatureLabel.text = "\(self.weatherData.temperature)¬∞"
                self.weatherIcon.image = UIImage(named: self.weatherData.weatherIconName)
                if self.positionOrSearch == .position {
                    self.weatherData.city = self.logic.user.lastPositionCity
                    self.logic.defaults.set(self.logic.user.lastPositionCity, forKey: self.logic.defaultsUserLastPositionCity)
                    print("Fel: \(self.weatherData.city)")
                    print("Fel: \(self.logic.user.lastPositionCity)")
                } else {
                    self.weatherData.city = self.logic.user.lastSearchedCity
                    self.logic.defaults.set(self.logic.user.lastSearchedCity, forKey: self.logic.defaultsUserLastSearchedCity)
                    print("Fel: \(self.weatherData.city)")
                    print("Fel: \(self.logic.user.lastSearchedCity)")
                }
                self.setButtonsEnabledOrNotEnabled()
            }
        }
        else {
            self.retrievedData = false
            self.title = String("\(json["message"])").capitalized
            weatherIcon.image = UIImage(named: "dont_know")
            temperatureLabel.text = ""
        }
    }
    
    // H√§mtar anv√§ndarens position om anv√§ndaren godk√§nner "Location When In Use".
    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        let location = locations[locations.count - 1]
        if location.horizontalAccuracy > 0 {
            locationManager.stopUpdatingLocation()
            locationManager.delegate = nil
            //print("longitude = \(location.coordinate.longitude), latitude = \(location.coordinate.latitude)" )
            latitude = String(location.coordinate.latitude)
            longitude = String(location.coordinate.longitude)
            //losgic.user.lastPositionCity = weatherData.city
            //logic.defaults.set(logsic.user.lastPositionCity, forKey: logic.defaultsUserLastPositionCity)
            logic.user.positionParams = ["lat": latitude, "lon": longitude, "appid": logic.APP_ID]
            logic.defaults.set(logic.user.positionParams, forKey: logic.defaultsPositionParams)
            positionOrSearch = .position
            getWeather(positionOrSearch: .position)
        }
    }
    
    // Vid misslyckad h√§mtning av data, uppdatera titeln till "Location unavailable".
    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {
        self.title = "Plats ej tillg√§nglig"
        retrievedData = false
        print(error)
    }
    
    // Uppdatera anv√§ndarens position
    func updatePosition() {
        locationManager.requestWhenInUseAuthorization()
        locationManager.delegate = self
        locationManager.desiredAccuracy = kCLLocationAccuracyHundredMeters
        locationManager.startUpdatingLocation()
    }
    
    // S√§tter knapparnas tillg√§nglighet beroende p√• olika villkor.
    func setButtonsEnabledOrNotEnabled() {
        if logic.user.car.longTimeSinceUserWashedCar == true {
            washedCarButton.isEnabled = true
        } else {
            washedCarButton.isEnabled = false
        }
        if retrievedData == true {
            forecastButton.isEnabled = true
        } else {
            forecastButton.isEnabled = false
        }
        if title == "\(logic.user.lastPositionCity)" {
            positionButton.isEnabled = false
        } else {
            positionButton.isEnabled = true
        }
    }
    
    // Ge anv√§ndaren en prognos.
    func giveForecastAlert() {
        logic.readUserDefaults()
        checkRain()
        var title = ""
        if logic.washToday == true {
            title = "Tv√§tta bilen idag üòç"
        } else {
            title = "Tv√§tta inte bilen idag üôÑ"
        }
        let longTimeSinceUserWashedCar = boolMessageEmoji(bool: logic.user.car.longTimeSinceUserWashedCar)
        let noRainTodayAndTomorrow = boolMessageEmoji(bool: logic.noRainTodayAndTomorrow)
        let searchForGoodDayToWashCar = boolMessageEmoji(bool: logic.searchForGoodDayToWashCar)
        let howManyDaysLeftToSearchDate = logic.user.howManyDaysToSearchingDate()
        let message = "\(longTimeSinceUserWashedCar) Bilen √§r inte tv√§ttad nyligen \n \(noRainTodayAndTomorrow) V√§dret √§r bra idag och imorgon \n \(searchForGoodDayToWashCar) \(howManyDaysLeftToSearchDate) dagar kvar tills appen b√∂rjar leta efter en bra dag att tv√§tta bilen."
        let alert = UIAlertController(title: title, message: message, preferredStyle: UIAlertController.Style.alert)
        alert.addAction(UIAlertAction(title: "Okej", style: UIAlertAction.Style.default, handler: nil))
        self.present(alert, animated: true, completion: nil)
    }
    
    // Background fetch
    func notifyUser(washToday: Bool) {
        if washToday == true {
            //print("Give user notification today!")
            let title = "Dags att tv√§tta bilen üöó"
            let body = "Det var l√§nge sedan du tv√§ttade din bil och det ska vara bra v√§der i \(weatherData.city) b√•de idag och imorgon ‚òÄÔ∏è"
            logic.sendNotification(title: title, body: body)
        } else {
            //print("Don't give user notification today!")
        }
//        print("")
//        print("* BACKGROUND-FETCH")
//        print("* Appen s√∂ker efter datum: \(logic.searchForGoodDayToWashCar)")
//        print("* L√§nge sedan bilen var tv√§ttad: \(logic.user.car.longTimeSinceUserWashedCar)")
//        print("* Inget regn idag och imorgon: \(logic.noRainTodayAndTomorrow)")
//        let formatter = DateFormatter()
//        let currentTime = Date()
//        formatter.dateFormat = "yyyy-MM-dd HH:mm:ss"
//        let date = formatter.string(from: currentTime)
//        let fetchedDate = formatter.string(from: fetchedDataTime)
//        print("* Tid f√∂r bakcground-fetch: \(date)")
//        print("* Tid f√∂r v√§der-fetch: \(fetchedDate)")
//        print("* V√§der stad: \(weatherData.city)")
//        print("* V√§der temperatur: \(weatherData.temperature)")
//        print("* V√§derlag id: \(weatherData.condition)")
    }
        
}

enum PositionOrSearch {
    case position
    case search
}
